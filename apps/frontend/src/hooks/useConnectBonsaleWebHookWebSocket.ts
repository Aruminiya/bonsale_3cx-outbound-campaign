import { useCallback, useEffect, useRef } from 'react';
import useGetOneBonsaleAutoDial from './api/useGetOneBonsaleAutoDial';

// ÂèñÂæóÊú¨Ê©ü IP domain
const { hostname } = window.location;
const WS_PROTOCOL = import.meta.env.VITE_WS_PROTOCOL;
const PORT = import.meta.env.VITE_API_PORT;
const DOMAIN = import.meta.env.VITE_DOMAIN;
const WS_HOST = DOMAIN === 'localhost' ? `${WS_PROTOCOL}://${hostname}:${PORT}` : `${WS_PROTOCOL}://${DOMAIN}:${PORT}`;

// Bonsale WebHook Ë®äÊÅØÂûãÂà•ÂÆöÁæ©
type BonsaleWebHookMessage = {
  type: string;
  body: Record<string, unknown>;
  [key: string]: unknown;
};

type ConnectBonsaleWebHookWebSocketProps = {
  setProjectOutboundData: React.Dispatch<React.SetStateAction<ProjectOutboundDataType[]>>;
};

export default function useConnectBonsaleWebHookWebSocket({ setProjectOutboundData }: ConnectBonsaleWebHookWebSocketProps) {
  const wsRef = useRef<WebSocket | null>(null);
  const { getOneBonsaleAutoDial } = useGetOneBonsaleAutoDial();

  // ËôïÁêÜ WebSocket Ë®äÊÅØ
  const handleWebSocketMessage = useCallback(async (event: MessageEvent) => {
    try {
      const message = JSON.parse(event.data) as BonsaleWebHookMessage;
      console.log('üì® Êî∂Âà∞ Bonsale WebHook Ë®äÊÅØ:', message);

      switch (message.type) {
        case 'auto-dial.created': {
          console.log('üÜï Êñ∞Â¢ûÂ∞àÊ°àÂ§ñÊí•Ë®≠ÂÆö:', message.body);
          const { callFlowId, projectId } = message.body as { Id: string; callFlowId: string; projectId: string };
          
          if (projectId && callFlowId) {
            try {
              // Áç≤ÂèñÊñ∞ÂâµÂª∫ÁöÑÂ∞àÊ°àÂ§ñÊí•Ë®≠ÂÆöË≥áÊñô
              const newAutoDialData = await getOneBonsaleAutoDial(projectId, callFlowId);
              
              console.log('üîÑ Êñ∞Â¢ûÁöÑÂ§ñÊí•Ë®≠ÂÆöË≥áÊñô:', newAutoDialData);
              
              // Ê™¢Êü•Â∞àÊ°àÊòØÂê¶Â∑≤Â≠òÂú®ÔºåÈÅøÂÖçÈáçË§áÊ∑ªÂä†
              setProjectOutboundData(prevData => {
                const existingProject = prevData.find(item => 
                  item.projectId === projectId && item.callFlowId === callFlowId
                );
                
                if (existingProject) {
                  console.log('üìã Â∞àÊ°àÂ∑≤Â≠òÂú®ÔºåË∑≥ÈÅéÊ∑ªÂä†:', projectId);
                  return prevData;
                }
                
                // ÂâµÂª∫Êñ∞ÁöÑÂ∞àÊ°àË≥áÊñôÁâ©‰ª∂
                const newProjectData: ProjectOutboundDataType = {
                  appId: newAutoDialData.appId,
                  appSecret: newAutoDialData.appSecret,
                  callFlowId: newAutoDialData.callFlow?.Id || callFlowId,
                  projectId: newAutoDialData.projectId || projectId,
                  projectName: newAutoDialData.projectInfo?.projectName || 'Êú™Áü•Â∞àÊ°à',
                  startDate: newAutoDialData.projectInfo?.startDate || new Date(),
                  endDate: newAutoDialData.projectInfo?.endDate || new Date(),
                  extension: newAutoDialData.callFlow?.phone || '',
                  recurrence: null, // Ê†πÊìöÈúÄË¶ÅË®≠ÂÆö
                  isEnable: newAutoDialData.projectInfo?.isEnable ?? true,
                };
                
                // Â∞áÊñ∞Â∞àÊ°àÊ∑ªÂä†Âà∞ÂàóË°®È†ÇÈÉ®
                return [newProjectData, ...prevData];
              });
              
              console.log('‚úÖ Êñ∞Â∞àÊ°àÂ§ñÊí•Ë®≠ÂÆöÊ∑ªÂä†ÂÆåÊàê');
            } catch (error) {
              console.error('‚ùå Ê∑ªÂä†Êñ∞Â∞àÊ°àÂ§ñÊí•Ë®≠ÂÆöÂ§±Êïó:', error);
            }
          }
          break;
        }
        case 'auto-dial.updated': {
          console.log('üìù Êõ¥Êñ∞Â∞àÊ°àÂ§ñÊí•Ë®≠ÂÆö:', message.body);
          const { callFlowId, projectId } = message.body as { Id: string; callFlowId: string; projectId: string };
          
          if (projectId && callFlowId) {
            try {
              // Áç≤ÂèñÊõ¥Êñ∞ÂæåÁöÑÂ∞àÊ°àÂ§ñÊí•Ë®≠ÂÆöË≥áÊñô
              const updatedAutoDialData = await getOneBonsaleAutoDial(projectId, callFlowId);
              
              console.log('üîÑ Êõ¥Êñ∞ÁöÑÂ§ñÊí•Ë®≠ÂÆöË≥áÊñô:', updatedAutoDialData);
              
              // Êõ¥Êñ∞ÂâçÁ´ØÁöÑÂ∞àÊ°àË≥áÊñô
              setProjectOutboundData(prevData => 
                prevData.map(item => {
                  if (item.projectId === projectId) {
                    return {
                      ...item,
                      // Êõ¥Êñ∞Áõ∏ÈóúÊ¨Ñ‰Ωç
                      appId: updatedAutoDialData.appId || item.appId,
                      appSecret: updatedAutoDialData.appSecret || item.appSecret,
                      callFlowId: updatedAutoDialData.callFlow?.Id || item.callFlowId,
                      projectName: updatedAutoDialData.projectInfo?.projectName || item.projectName,
                      startDate: updatedAutoDialData.projectInfo?.startDate || item.startDate,
                      endDate: updatedAutoDialData.projectInfo?.endDate || item.endDate,
                      extension: updatedAutoDialData.callFlow?.phone || item.extension,
                      isEnable: updatedAutoDialData.projectInfo?.isEnable ?? item.isEnable,
                    };
                  }
                  return item;
                })
              );
              
              console.log('‚úÖ Â∞àÊ°àÂ§ñÊí•Ë®≠ÂÆöÊõ¥Êñ∞ÂÆåÊàê');
            } catch (error) {
              console.error('‚ùå Êõ¥Êñ∞Â∞àÊ°àÂ§ñÊí•Ë®≠ÂÆöÂ§±Êïó:', error);
            }
          }
          break;
        }
        case 'project.updated': {
          console.log('üîÑ Â∞àÊ°àÁãÄÊÖãÊõ¥Êñ∞:', message.body);
          const { Id: projectId, isEnable } = message.body;
          
          if (projectId && typeof isEnable === 'boolean') {
            setProjectOutboundData(prevData => 
              prevData.map(item => 
                item.projectId === projectId 
                  ? { ...item, isEnable }
                  : item
              )
            );
          }
          break;
        }
        default: {
          console.warn('‚ö†Ô∏è Êú™Áü•ÁöÑ WebHook Ë®äÊÅØÈ°ûÂûã:', message.type);
          break;
        }
      }
    } catch (error) {
      console.error('‚ùå ËôïÁêÜ Bonsale WebHook Ë®äÊÅØÊôÇÁôºÁîüÈåØË™§:', error);
    }
  }, [setProjectOutboundData, getOneBonsaleAutoDial]);

  // Âª∫Á´ã WebSocket ÈÄ£Á∑ö
  const connectWebSocket = useCallback(() => {
    const ws = wsRef.current;
    if (!ws) {
      console.error('‚ùå Bonsale WebHook WebSocket Êú™ÂàùÂßãÂåñ');
      return;
    }

    ws.onopen = () => {
      console.log('üì° Bonsale WebHook WebSocket ÈÄ£Á∑öÂ∑≤Âª∫Á´ã');
    };

    ws.onmessage = handleWebSocketMessage;

    ws.onerror = (error) => {
      console.error('‚ùå Bonsale WebHook WebSocket ÈåØË™§:', error);
    };

    ws.onclose = (event) => {
      console.log('üëã Bonsale WebHook WebSocket ÈÄ£Á∑öÂ∑≤ÈóúÈñâ', {
        code: event.code,
        reason: event.reason,
        wasClean: event.wasClean
      });
      
      // Â¶ÇÊûú‰∏çÊòØÊ≠£Â∏∏ÈóúÈñâÔºåÂòóË©¶ÈáçÈÄ£
      if (!event.wasClean && event.code !== 1000) {
        console.log('üîÑ ÂòóË©¶Âú® 3 ÁßíÂæåÈáçÊñ∞ÈÄ£Êé• Bonsale WebHook WebSocket...');
        setTimeout(() => {
          if (wsRef.current?.readyState === WebSocket.CLOSED) {
            wsRef.current = new WebSocket(`${WS_HOST}/api/bonsale/WebHook`);
            connectWebSocket();
          }
        }, 3000);
      }
    };
  }, [handleWebSocketMessage]);

  useEffect(() => {
    // ÂàùÂßãÂåñ WebSocket ÈÄ£Êé•
    wsRef.current = new WebSocket(`${WS_HOST}/api/bonsale/WebHook`);
    connectWebSocket();

    return () => {
      if (wsRef.current) {
        wsRef.current.close();
        console.log('üßπ Bonsale WebHook WebSocket ÈÄ£Á∑öÂ∑≤Ê∏ÖÁêÜ');
      }
    };
  }, [connectWebSocket]);

  // ËøîÂõû WebSocket ÁãÄÊÖãÂíåÊñπÊ≥ï
  return {
    isConnected: wsRef.current?.readyState === WebSocket.OPEN,
    disconnect: () => wsRef.current?.close(),
  };
}
